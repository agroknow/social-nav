// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agroknow.socnav.web;

import com.agroknow.socnav.domain.Item;
import com.agroknow.socnav.domain.Reviewing;
import com.agroknow.socnav.domain.User;
import com.agroknow.socnav.reference.LanguageType;
import com.agroknow.socnav.reference.SharingLevelType;
import com.agroknow.socnav.service.ItemService;
import com.agroknow.socnav.service.ReviewingService;
import com.agroknow.socnav.service.UserService;
import com.agroknow.socnav.web.ReviewingController;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect ReviewingController_Roo_Controller {
    
    @Autowired
    ReviewingService ReviewingController.reviewingService;
    
    @Autowired
    ItemService ReviewingController.itemService;
    
    @Autowired
    UserService ReviewingController.userService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String ReviewingController.create(@Valid Reviewing reviewing, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, reviewing);
            return "reviewings/create";
        }
        uiModel.asMap().clear();
        reviewingService.saveReviewing(reviewing);
        return "redirect:/reviewings/" + encodeUrlPathSegment(reviewing.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String ReviewingController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Reviewing());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (userService.countAllUsers() == 0) {
            dependencies.add(new String[] { "user", "users" });
        }
        if (itemService.countAllItems() == 0) {
            dependencies.add(new String[] { "item", "items" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "reviewings/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String ReviewingController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("reviewing", reviewingService.findReviewing(id));
        uiModel.addAttribute("itemId", id);
        return "reviewings/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String ReviewingController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("reviewings", reviewingService.findReviewingEntries(firstResult, sizeNo));
            float nrOfPages = (float) reviewingService.countAllReviewings() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("reviewings", reviewingService.findAllReviewings());
        }
        addDateTimeFormatPatterns(uiModel);
        return "reviewings/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String ReviewingController.update(@Valid Reviewing reviewing, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, reviewing);
            return "reviewings/update";
        }
        uiModel.asMap().clear();
        reviewingService.updateReviewing(reviewing);
        return "redirect:/reviewings/" + encodeUrlPathSegment(reviewing.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String ReviewingController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, reviewingService.findReviewing(id));
        return "reviewings/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String ReviewingController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Reviewing reviewing = reviewingService.findReviewing(id);
        reviewingService.deleteReviewing(reviewing);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/reviewings";
    }
    
    void ReviewingController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("reviewing_updated_at_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void ReviewingController.populateEditForm(Model uiModel, Reviewing reviewing) {
        uiModel.addAttribute("reviewing", reviewing);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("items", itemService.findAllItems());
        uiModel.addAttribute("users", userService.findAllUsers());
        uiModel.addAttribute("languagetypes", Arrays.asList(LanguageType.values()));
        uiModel.addAttribute("sharingleveltypes", Arrays.asList(SharingLevelType.values()));
    }
    
    String ReviewingController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
