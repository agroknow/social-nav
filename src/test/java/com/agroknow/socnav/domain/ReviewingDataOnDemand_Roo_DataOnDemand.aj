// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agroknow.socnav.domain;

import com.agroknow.socnav.domain.Item;
import com.agroknow.socnav.domain.ItemDataOnDemand;
import com.agroknow.socnav.domain.Reviewing;
import com.agroknow.socnav.domain.ReviewingDataOnDemand;
import com.agroknow.socnav.domain.User;
import com.agroknow.socnav.domain.UserDataOnDemand;
import com.agroknow.socnav.reference.LanguageType;
import com.agroknow.socnav.reference.SharingLevelType;
import com.agroknow.socnav.service.ReviewingService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect ReviewingDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ReviewingDataOnDemand: @Component;
    
    private Random ReviewingDataOnDemand.rnd = new SecureRandom();
    
    private List<Reviewing> ReviewingDataOnDemand.data;
    
    @Autowired
    ItemDataOnDemand ReviewingDataOnDemand.itemDataOnDemand;
    
    @Autowired
    UserDataOnDemand ReviewingDataOnDemand.userDataOnDemand;
    
    @Autowired
    ReviewingService ReviewingDataOnDemand.reviewingService;
    
    public Reviewing ReviewingDataOnDemand.getNewTransientReviewing(int index) {
        Reviewing obj = new Reviewing();
        setDomain(obj, index);
        setIp_address(obj, index);
        setItem(obj, index);
        setLang(obj, index);
        setReview(obj, index);
        setSession_id(obj, index);
        setSharing_level(obj, index);
        setUpdated_at(obj, index);
        setUser(obj, index);
        return obj;
    }
    
    public void ReviewingDataOnDemand.setDomain(Reviewing obj, int index) {
        String domain = "domain_" + index;
        obj.setDomain(domain);
    }
    
    public void ReviewingDataOnDemand.setIp_address(Reviewing obj, int index) {
        String ip_address = "ip_address_" + index;
        obj.setIp_address(ip_address);
    }
    
    public void ReviewingDataOnDemand.setItem(Reviewing obj, int index) {
        Item item = itemDataOnDemand.getRandomItem();
        obj.setItem(item);
    }
    
    public void ReviewingDataOnDemand.setLang(Reviewing obj, int index) {
        LanguageType lang = LanguageType.class.getEnumConstants()[0];
        obj.setLang(lang);
    }
    
    public void ReviewingDataOnDemand.setReview(Reviewing obj, int index) {
        String review = "review_" + index;
        if (review.length() > 255) {
            review = review.substring(0, 255);
        }
        obj.setReview(review);
    }
    
    public void ReviewingDataOnDemand.setSession_id(Reviewing obj, int index) {
        String session_id = "session_id_" + index;
        obj.setSession_id(session_id);
    }
    
    public void ReviewingDataOnDemand.setSharing_level(Reviewing obj, int index) {
        SharingLevelType sharing_level = SharingLevelType.class.getEnumConstants()[0];
        obj.setSharing_level(sharing_level);
    }
    
    public void ReviewingDataOnDemand.setUpdated_at(Reviewing obj, int index) {
        Date updated_at = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setUpdated_at(updated_at);
    }
    
    public void ReviewingDataOnDemand.setUser(Reviewing obj, int index) {
        User user = userDataOnDemand.getRandomUser();
        obj.setUser(user);
    }
    
    public Reviewing ReviewingDataOnDemand.getSpecificReviewing(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Reviewing obj = data.get(index);
        Long id = obj.getId();
        return reviewingService.findReviewing(id);
    }
    
    public Reviewing ReviewingDataOnDemand.getRandomReviewing() {
        init();
        Reviewing obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return reviewingService.findReviewing(id);
    }
    
    public boolean ReviewingDataOnDemand.modifyReviewing(Reviewing obj) {
        return false;
    }
    
    public void ReviewingDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = reviewingService.findReviewingEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Reviewing' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Reviewing>();
        for (int i = 0; i < 10; i++) {
            Reviewing obj = getNewTransientReviewing(i);
            try {
                reviewingService.saveReviewing(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
