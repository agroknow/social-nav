// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agroknow.socnav.domain;

import com.agroknow.socnav.domain.Preference;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Preference_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager Preference.entityManager;
    
    public static final EntityManager Preference.entityManager() {
        EntityManager em = new Preference().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Preference.countPreferences() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Preference o", Long.class).getSingleResult();
    }
    
    public static List<Preference> Preference.findAllPreferences() {
        return entityManager().createQuery("SELECT o FROM Preference o", Preference.class).getResultList();
    }
    
    public static Preference Preference.findPreference(Long id) {
        if (id == null) return null;
        return entityManager().find(Preference.class, id);
    }
    
    public static List<Preference> Preference.findPreferenceEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Preference o", Preference.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
    @Transactional
    public void Preference.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Preference.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Preference attached = Preference.findPreference(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Preference.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Preference.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Preference Preference.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Preference merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
