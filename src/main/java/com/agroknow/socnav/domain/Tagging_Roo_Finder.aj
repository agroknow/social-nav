// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.agroknow.socnav.domain;

import com.agroknow.socnav.domain.Item;
import com.agroknow.socnav.domain.Tag;
import com.agroknow.socnav.domain.Tagging;
import com.agroknow.socnav.domain.User;
import java.util.Set;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect Tagging_Roo_Finder {
    
    public static TypedQuery<Tagging> Tagging.findTaggingsByItem(Item item) {
        if (item == null) throw new IllegalArgumentException("The item argument is required");
        EntityManager em = Tagging.entityManager();
        TypedQuery<Tagging> q = em.createQuery("SELECT o FROM Tagging AS o WHERE o.item = :item", Tagging.class);
        q.setParameter("item", item);
        return q;
    }
    
    public static TypedQuery<Tagging> Tagging.findTaggingsByTags(Set<Tag> tags) {
        if (tags == null) throw new IllegalArgumentException("The tags argument is required");
        EntityManager em = Tagging.entityManager();
        StringBuilder queryBuilder = new StringBuilder("SELECT o FROM Tagging AS o WHERE");
        for (int i = 0; i < tags.size(); i++) {
            if (i > 0) queryBuilder.append(" AND");
            queryBuilder.append(" :tags_item").append(i).append(" MEMBER OF o.tags");
        }
        TypedQuery<Tagging> q = em.createQuery(queryBuilder.toString(), Tagging.class);
        int tagsIndex = 0;
        for (Tag _tag: tags) {
            q.setParameter("tags_item" + tagsIndex++, _tag);
        }
        return q;
    }
    
    public static TypedQuery<Tagging> Tagging.findTaggingsByUser(User user) {
        if (user == null) throw new IllegalArgumentException("The user argument is required");
        EntityManager em = Tagging.entityManager();
        TypedQuery<Tagging> q = em.createQuery("SELECT o FROM Tagging AS o WHERE o.user = :user", Tagging.class);
        q.setParameter("user", user);
        return q;
    }
    
    public static TypedQuery<Tagging> Tagging.findTaggingsByUserAndItem(User user, Item item) {
        if (user == null) throw new IllegalArgumentException("The user argument is required");
        if (item == null) throw new IllegalArgumentException("The item argument is required");
        EntityManager em = Tagging.entityManager();
        TypedQuery<Tagging> q = em.createQuery("SELECT o FROM Tagging AS o WHERE o.user = :user AND o.item = :item", Tagging.class);
        q.setParameter("user", user);
        q.setParameter("item", item);
        return q;
    }
    
}
